'''

====Part 3 AES Key derivation====
Your prayers are heard: https://wizardforcel.gitbooks.io/practical-cryptography-for-developers-book/symmetric-key-ciphers/aes-encrypt-decrypt-examples.html

'''

import pyaes
import pbkdf2
import binascii, os, secrets


''' Password to Key Derivation '''
# Derive a 256-bit AES encryption key from the password
passwordSalt = open('passwordSalt.txt', 'rb').read()
# print(passwordSalt)
passwordSalt1 = b'\x7f\x8a\x91\xab\xc2\x0c\xe6\x8d\xc0\xd7\xba!\xd2\x80\xa1M'
# print(type(passwordSalt))
# salt = os.urandom(16)
# print(type(salt))
password = 's3cr3t*c0d3'
key = pbkdf2.PBKDF2(password, passwordSalt).read(32)
print('AES encryption key:', binascii.hexlify(key))
# print('AES encryption key:', len(binascii.hexlify(key)))
key1 = pbkdf2.PBKDF2(password, passwordSalt1).read(32)
print('AES encryption key1:', binascii.hexlify(key1))


''' AES Encryption (CTR Block Mode) '''
# Encrypt the plaintext with the given key:
#   ciphertext = AES-256-CTR-Encrypt(plaintext, key, iv)
# iv = secrets.randbits(256)
# plaintext = "Text for encryption"
# aes = pyaes.AESModeOfOperationCTR(key, pyaes.Counter(iv))
# ciphertext = aes.encrypt(plaintext)
# print(type(ciphertext))
# print('Encrypted:', binascii.hexlify(ciphertext))

# The 4 encrypted texts provided by SMTB (generated by the above method)
ct1 = b'cee979b86e2c59f6caab3c6055fbfa'
ct2 = b'c9ee7aa5693542f0d7b63a615af6'
ct3 = b'ccf27fb3733944e0'
ct4 = b'c9f371b069'

ctlist = [b'cee979b86e2c59f6caab3c6055fbfa', b'c9ee7aa5693542f0d7b63a615af6', b'ccf27fb3733944e0', b'c9f371b069']

''' AES Decryption (CTR Block Mode) '''
# Decrypt the ciphertext with the given key:
#   plaintext = AES-256-CTR-Decrypt(ciphertext, key, iv)
iv = 57116448576878005380785937564945681393249968307171981972903895716101015138040
# print(key)
aes = pyaes.AESModeOfOperationCTR(key, pyaes.Counter(iv))
decrypted = aes.decrypt(ct1)
print('ct1:', ct1)
print('Decrypted ct1:', decrypted)

decrypted = aes.decrypt(ct2)
print('ct2:', ct2)
print('Decrypted ct2:', decrypted)

decrypted = aes.decrypt(ct3)
print('ct3:', ct3)
print('Decrypted ct3:', decrypted)

decrypted = aes.decrypt(ct4)
print('ct4:', ct4)
print('Decrypted ct4:', decrypted)

# for ciphertext in ctlist:
#     print('ct:',  ciphertext)
#     decrypted = aes.decrypt(ciphertext)
#     print('Decrypted:', decrypted)

# For incorrect key output
# key = os.urandom(32)   # random decryption key
# aes = pyaes.AESModeOfOperationCTR(key, pyaes.Counter(iv))
# print('Wrongly decrypted format:', aes.decrypt(ciphertext))






